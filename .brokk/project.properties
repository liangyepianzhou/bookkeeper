#Brokk project configuration
#Thu Jun 05 20:50:06 CST 2025
buildDetailsJson={"buildFiles"\:["pom.xml"],"dependencies"\:["org.projectlombok\:lombok","com.github.spotbugs\:spotbugs-annotations","org.slf4j\:slf4j-api","commons-configuration\:commons-configuration","junit\:junit","org.junit.jupiter\:junit-jupiter-api","com.google.guava\:guava","io.netty\:netty-bom (imported)","org.apache.zookeeper\:zookeeper","com.google.protobuf\:protobuf-bom (imported)","io.grpc\:grpc-bom (imported)"],"buildLintCommand"\:"mvn compile","testAllCommand"\:"mvn test -Pdev","instructions"\:"\#\# Apache BookKeeper Build Details (Development Focus)\\n\\nThis is a multi-module Apache Maven project. All commands should typically be run from the project root directory where the main `pom.xml` is located.\\n\\n**Build File\:** `pom.xml` (This is the parent POM, with modules listed under the `<modules>` section. Each module will have its own `pom.xml`.)\\n\\n**Java Version\:**\\n- The project is configured for Java 8 (`<maven.compiler.source>8</maven.compiler.source>`, `<maven.compiler.target>8</maven.compiler.target>`).\\n- A profile `jdk11` automatically activates for JDK 11 and later, configuring the necessary JVM arguments and compiler settings (`<maven.compiler.release>`).\\n\\n**Key Build Commands\:**\\n- **Clean\:** `mvn clean`\\n- **Compile (incremental build and lint)\:** `mvn compile`\\n  - This command will also trigger Checkstyle validation as it's bound to the `validate` phase.\\n- **Package (create JARs/artifacts)\:** `mvn package`\\n- **Install to Local Maven Repository\:** `mvn install`\\n- **Run All Unit Tests\:** `mvn test`\\n  - By default, tests may retry on failure (up to 2 times).\\n  - Use the `dev` profile to disable retries and see output directly in the console\: `mvn test -Pdev`\\n\\n**Running Specific Tests\:**\\n- To run a specific test class\: `mvn test -Dtest\=your.package.YourTestClass`\\n- To run a specific test method\: `mvn test -Dtest\=your.package.YourTestClass\#yourTestMethod`\\n- To run tests matching a pattern\: `mvn test -Dtest\=**/YourTestClass.java`\\n- Combine with profiles if needed, e.g., `mvn test -Pdev -Dtest\=your.package.YourTestClass`\\n\\n**Development Profiles\:**\\n- **`-Pdev`**\: Recommended for local development.\\n  - Sets `redirectTestOutputToFile` to `false` (test output to console).\\n  - Sets `rerunFailingTestsCount` to `0` (no test retries).\\n  - Usage\: e.g., `mvn install -Pdev` or `mvn test -Pdev`.\\n- **`-Pdev-debug`**\: Similar to `-Pdev` but adds more JVM arguments for debugging, including increased logging and Netty leak detection.\\n  - Usage\: e.g., `mvn install -Pdev-debug`.\\n- **`-Pdelombok`**\: Generates Java source code from Lombok annotations into `target/generated-sources/delombok/`.\\n  - This can be useful for understanding the generated code or for enabling Javadoc generation (which is otherwise skipped).\\n  - Usage\: `mvn compile -Pdelombok`. Javadoc can be generated using `mvn site -Pdelombok`.\\n\\n**Linting and Static Analysis Tools\:**\\n- **Checkstyle\:** Integrated into the build and runs during the `validate` phase (e.g., triggered by `mvn compile` or `mvn validate`).\\n  - Configuration\: `buildtools/src/main/resources/bookkeeper/checkstyle.xml`\\n  - Suppressions\: `buildtools/src/main/resources/bookkeeper/suppressions.xml`\\n  - To run explicitly\: `mvn checkstyle\:check`\\n- **SpotBugs\:** Used for static analysis to find bugs.\\n  - Configuration\: `buildtools/src/main/resources/bookkeeper/findbugsExclude.xml` (for exclusions)\\n  - To run explicitly\: `mvn spotbugs\:check`\\n- **Spotless\:** Used for code formatting, specifically configured for Groovy files in this project.\\n  - To check formatting\: `mvn spotless\:check`\\n  - To apply formatting\: `mvn spotless\:apply`\\n\\n**Lombok\:**\\n- The project uses Lombok extensively (e.g., `@Data`, `@Slf4j`). It is highly recommended to have the Lombok plugin installed and configured in your IDE for a smooth development experience.\\n\\n**Main Application Entry Point\:**\\n- This is a multi-module library/server project. The parent POM itself does not define a single main application entry point.\\n- Specific executable modules (e.g., `bookkeeper-server`, `bookkeeper-benchmark`, tools within the `tools` module) will contain their own main classes and runnable applications.\\n\\n**Dependencies\:**\\n- Key common dependencies include Lombok, SLF4J, Commons Configuration, JUnit 4 & 5, Guava, Netty, ZooKeeper, Protobuf, gRPC.\\n- For a comprehensive list of dependencies and their versions, refer to the `<dependencyManagement>` and `<dependencies>` sections in the root `pom.xml`, as well as the individual module `pom.xml` files.\\n\\n**Environment Configuration\:**\\n- No specific environment variables seem strictly required for a basic local development build, beyond a correctly configured JDK and Maven setup.\\n- The `jdk11` profile handles Java 11+ specifics automatically.\\n- The `UBUNTU_MIRROR` and `UBUNTU_SECURITY_MIRROR` environment variables can be used to override default mirror URLs if building specific native components or using tools that rely on these (as suggested by profiles in the POM), but are unlikely to be needed for general Java development tasks.","excludedDirectories"\:["**/bookkeeper.egg-info","**/.pytest_cache","lib","data","log","**/.nox","site3","site2","**/proto","**/org/apache/distributedlog/thrift","dev/.vagrant","tools/all/src/main/resources",".idea","logs",".settings",".gradle",".repository",".recommenders","**/src/main/resources/deps","**/generated-sources","target","site","build","**/apidocs","**/python/include","**/python/bin","**/__pycache__","**/python/lib"]}
code_intelligence_refresh=MANUAL
dataRetentionPolicy=IMPROVE_BROKK
